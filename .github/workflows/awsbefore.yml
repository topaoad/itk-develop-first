name: AWS EC2へのCI/CDテスト

on:
  push:
  # ブランチにプッシュまたはプルリクしたら発動
    branches: [ "main" ]

env:
  # AWS_REGION: ap-northeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  # ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  # ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  # ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  # ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  #                                              # file, e.g. .aws/task-definition.json
  # CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

#このWorkflowにおける secrets.GITHUB_TOKEN は リポジトリの読み取りを許可するという意味になります。
permissions:
  contents: read
  id-token: write 

# ワークフローの実行処理
jobs:
  build:
# ジョブが実行されるランナー(仮想デバイス)の種類（Linuxはこれ）
    runs-on: ubuntu-latest

# ジョブのステップ
  steps:
# IP取得ライブラリをインストール
    - name: Public IP Install
      id: ip
      uses: haythem/public-ip@v1.2

  # BranchをCheckout
    - name: Checkout
      uses: actions/checkout@v2

# # AWS CLIをインストールする
#     - name: AWS CLI install
#       run: |
#         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#         unzip awscliv2.zip
#         sudo ./aws/install --update
#         aws --version

# # AWS CLIにキーを設定をする
#     - name: AWS set Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-1

# AWS認証
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ap-northeast-1
        role-to-assume: ${{ secrets.EC2_ROLE_ARN }}
        role-session-name: github-actions-deploy-${{ github.event.repository.name }}-${{ github.run_number }}


# デプロイする
    # - name: Deploy to EC2
    #   run: |

# SSHのセキュリティグループを開放する
      # aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

# SSH接続して、git pullする
      # echo "${{ secrets.GIT_PRIVATE_KEY }}" > private_key
      # chmod 600 private_key
      # ssh -oStrictHostKeyChecking=no ${{ secrets.EC2_USER_NAME }}@${{ secrets.EC2_HOST_NAME }} -i private_key "cd /home && git fetch --prune && git checkout main && git pull origin main"
      # cd /home && git fetch --prune && git checkout main && git pull origin main

# SSHのセキュリティグループを閉じる
      # aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    - name: Revoke security group
      if: always()
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32



# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest  #Linuxはこれで
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
