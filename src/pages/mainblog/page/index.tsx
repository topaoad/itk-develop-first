import { Center, Loader, Text } from "@mantine/core";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import InfiniteScroll from "react-infinite-scroller";
import { Layout } from "src/components/Layout";
import { BlogArchive } from "src/components/PageContainer/BlogArchive";
import { client } from "src/lib/miscrocms/client";
import { useRequestBlog } from "src/lib/swr/useRequestBlog";
import styles from "src/styles/Home.module.css";
import type { Article } from "src/types/article";

export type BlogPaginationProps = {
  blog: Article[];
  totalCount: number;
};

const Blog: NextPage<BlogPaginationProps> = ({ blog, totalCount }) => {
  const { error, isLoadingMore, isReachingEnd, items, setSize, size } =
    useRequestBlog(blog);
  const loadMore = () => {
    if (!isLoadingMore && !isReachingEnd) {
      setSize(size + 1);
    }
  };
  if (error) {
    return (
      <Layout>
        <Center>
          <Text color="red">ブログ記事の取得に失敗しました</Text>
        </Center>
      </Layout>
    );
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Layout>
        <InfiniteScroll
          pageStart={0}
          loadMore={loadMore}
          hasMore={!isReachingEnd}
          threshold={100}
          loader={
            <Center key={"loading"} mt={24}>
              <Loader />
            </Center>
          }
        >
          <BlogArchive blog={items} />
        </InfiniteScroll>
        {/* <Pagination totalCount={totalCount} /> */}
      </Layout>
    </div>
  );
};

export default Blog;
export const getStaticProps: GetStaticProps = async () => {
  const data = await client.get({
    endpoint: "mainblog",
    queries: { limit: 5, offset: 0 },
  });

  return {
    props: {
      blog: data.contents,
      totalCount: data.totalCount,
    },
  };
};
